definitions:
  utils.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  utils.ForgotPasswordRequest:
    properties:
      email:
        type: string
    type: object
  utils.ForgotPasswordResponse:
    properties:
      message:
        type: string
    type: object
  utils.LoginResponse:
    properties:
      access_token:
        type: string
      email:
        type: string
      expires_at:
        type: string
      message:
        type: string
      name:
        type: string
      refresh_token:
        type: string
    type: object
  utils.LogoutResponse:
    properties:
      message:
        type: string
    type: object
  utils.RegisterResponse:
    properties:
      email:
        type: string
      message:
        type: string
      name:
        type: string
    type: object
  utils.ResetPasswordRequest:
    properties:
      password:
        type: string
      token:
        type: string
    type: object
  utils.Tag:
    properties:
      color:
        type: string
      text:
        type: string
    type: object
  utils.TagResponse:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/image/update:
    post:
      consumes:
      - application/json
      description: Update image of a user
      parameters:
      - description: Image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.RegisterResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update Image
      tags:
      - users
  /api/profile:
    get:
      description: Get deatils of a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.RegisterResponse'
      summary: Get Profile
      tags:
      - users
  /api/tags:
    delete:
      consumes:
      - application/json
      description: Delete a tag
      parameters:
      - description: Tag details
        in: body
        name: request
        required: true
        schema:
          properties:
            tag:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.TagResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Delete Tag
      tags:
      - tags
    get:
      consumes:
      - application/json
      description: Get all tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/utils.Tag'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get Tags
      tags:
      - tags
    post:
      consumes:
      - application/json
      description: Create a new tag
      parameters:
      - description: Tag details
        in: body
        name: request
        required: true
        schema:
          properties:
            tag:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.TagResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create Tag
      tags:
      - tags
  /api/tags/remove:
    post:
      consumes:
      - application/json
      description: Remove a tag from a specific date
      parameters:
      - description: Tag details
        in: body
        name: request
        required: true
        schema:
          properties:
            date:
              type: string
            text:
              type: string
            user_id:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.TagResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Remove Tag
      tags:
      - tags
  /api/tags/set:
    post:
      consumes:
      - application/json
      description: Set a tag to a specific date
      parameters:
      - description: Tag details
        in: body
        name: request
        required: true
        schema:
          properties:
            date:
              type: string
            text:
              type: string
            user_id:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.TagResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Set Tag
      tags:
      - tags
  /api/v1/hello:
    get:
      consumes:
      - application/json
      description: This is a test route
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.LogoutResponse'
      summary: API Documentation
      tags:
      - test
  /auth/google:
    get:
      description: Google login function returns redirect url
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Google Login
      tags:
      - users
  /consumer/forgot_password:
    post:
      consumes:
      - application/json
      description: Sends a password reset link to the user's email
      parameters:
      - description: Forgot Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/utils.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset link sent
          schema:
            $ref: '#/definitions/utils.ForgotPasswordResponse'
        "400":
          description: Error resetting password
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "405":
          description: Method not allowed
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Forgot Password
      tags:
      - users
  /consumer/login:
    post:
      consumes:
      - application/json
      description: Login user with email and password
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          properties:
            email:
              type: string
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful
          schema:
            $ref: '#/definitions/utils.LoginResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: User Login
      tags:
      - users
  /consumer/logout:
    post:
      consumes:
      - application/json
      description: Logout the user from application
      parameters:
      - default: Bearer
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/utils.LogoutResponse'
        "401":
          description: Missing token
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "409":
          description: Invalid token format
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: User Logout
      tags:
      - users
  /consumer/register:
    post:
      consumes:
      - application/json
      description: Register user with email, password and other details
      parameters:
      - description: User register credentials
        in: body
        name: request
        required: true
        schema:
          properties:
            email:
              type: string
            name:
              type: string
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Registration successful
          schema:
            $ref: '#/definitions/utils.RegisterResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: User Login
      tags:
      - users
  /consumer/reset_password:
    post:
      consumes:
      - application/json
      description: Resets the user's password using the provided token
      parameters:
      - description: Reset Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/utils.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password has been reset successfully
          schema:
            $ref: '#/definitions/utils.ForgotPasswordResponse'
        "400":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "405":
          description: Method not allowed
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Reset Password
      tags:
      - users
swagger: "2.0"
